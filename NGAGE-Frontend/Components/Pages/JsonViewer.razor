@page "/json-viewer"
@inject ApiDataService ApiService

<h1>Structured JSON Viewer</h1>

<div class="mb-3">
    <a href="/" class="btn btn-secondary">
        <i class="bi bi-arrow-left"></i> Back to Main View
    </a>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center my-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (string.IsNullOrEmpty(rawJson))
{
    <div class="alert alert-warning">No JSON data available.</div>
}
else
{
    <div class="card">
        <div class="card-header">
            <h3>JSON Structure</h3>
        </div>
        <div class="card-body">
            <div class="json-tree">
                @RenderJsonObject(jsonObject)
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    private string? rawJson;
    private Dictionary<string, object>? jsonObject;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            rawJson = await ApiService.GetRawJsonAsync(24); 

            if (!string.IsNullOrEmpty(rawJson))
            {
                jsonObject = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(
                    rawJson,
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                );
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading JSON data: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

	//Render JsonObject med rekursiv liste, da strukturen er ukendt.
    private RenderFragment RenderJsonObject(Dictionary<string, object>? obj) => builder =>
    {
        if (obj == null) return;

        builder.OpenElement(0, "ul");
        builder.AddAttribute(1, "class", "list-group");

        foreach (var kvp in obj)
        {
            builder.OpenElement(2, "li");
            builder.AddAttribute(3, "class", "list-group-item");

            builder.OpenElement(4, "strong");
            builder.AddContent(5, kvp.Key);
            builder.CloseElement(); 

            builder.AddContent(6, ": ");

            if (kvp.Value is System.Text.Json.JsonElement element)
            {
                switch (element.ValueKind)
                {
                    case System.Text.Json.JsonValueKind.Object:
                        var childObj = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(
                            element.GetRawText(),
                            new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                        );
                        builder.OpenElement(7, "div");
                        builder.AddAttribute(8, "class", "ps-3 mt-2");
                        builder.AddContent(9, RenderJsonObject(childObj));
                        builder.CloseElement(); 
                        break;

                    case System.Text.Json.JsonValueKind.Array:
                        builder.OpenElement(10, "div");
                        builder.AddAttribute(11, "class", "ps-3 mt-2");
                        builder.OpenElement(12, "ul");
                        builder.AddAttribute(13, "class", "list-group");

                        foreach (var item in element.EnumerateArray())
                        {
                            builder.OpenElement(14, "li");
                            builder.AddAttribute(15, "class", "list-group-item");

                            if (item.ValueKind == System.Text.Json.JsonValueKind.Object)
                            {
                                var arrayObj = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(
                                    item.GetRawText(),
                                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                                );
                                builder.AddContent(16, RenderJsonObject(arrayObj));
                            }
                            else
                            {
                                builder.AddContent(17, item.ToString());
                            }

                            builder.CloseElement(); 
                        }

                        builder.CloseElement(); 
                        builder.CloseElement(); 
                        break;

                    default:
                        builder.AddContent(18, element.ToString());
                        break;
                }
            }
            else
            {
                builder.AddContent(19, kvp.Value?.ToString() ?? "null");
            }

            builder.CloseElement(); 
        }

        builder.CloseElement(); 
    };
}
